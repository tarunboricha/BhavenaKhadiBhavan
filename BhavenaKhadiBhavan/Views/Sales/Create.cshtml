@model SalesViewModel
@{
    ViewData["Title"] = "New Sale";
}

<div class="container-fluid">
    <!-- Header -->
    <div class="row mb-3">
        <div class="col-12">
            <h2>
                <i class="fas fa-shopping-cart me-2 text-primary"></i>
                New Sale
            </h2>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="@Url.Action("Index", "Sales")">
                            <i class="fas fa-list me-1"></i>View Sales
                        </a>
                    </li>
                    <li class="breadcrumb-item active">New Sale</li>
                </ol>
            </nav>
            <hr>
        </div>
    </div>

    <div class="row">
        <!-- Left Panel: Product Selection -->
        <div class="col-lg-8">
            <!-- Step-by-Step Product Selection -->
            <div class="card shadow mb-4">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-search me-2"></i>Product Selection
                    </h5>
                </div>
                <div class="card-body">
                    <!-- Filters -->
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label for="categoryFilter" class="form-label">Category</label>
                            <select class="form-select" id="categoryFilter">
                                <option value="">All Categories</option>
                                @foreach (var category in Model.Categories)
                                {
                                    <option value="@category.Id">@category.Name</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-8">
                            <label for="productSearch" class="form-label">Search Products</label>
                            <div class="input-group">
                                <input type="text" class="form-control" id="productSearch" placeholder="Search product names...">
                                <button class="btn btn-outline-secondary" type="button" id="searchBtn">
                                    <i class="fas fa-search"></i>
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Step 1: Product Names -->
                    <div id="step1" class="selection-step">
                        <h6 class="text-primary mb-3">
                            <span class="badge bg-primary me-2">1</span>
                            Select Product
                            <small class="text-muted ms-2" id="productCount">(Loading...)</small>
                        </h6>
                        <div id="productNamesGrid" class="row">
                            <div class="col-12 text-center py-4">
                                <div class="spinner-border text-primary" role="status"></div>
                                <p class="mt-2 text-muted">Loading products...</p>
                            </div>
                        </div>
                    </div>

                    <!-- Step 2: Colors -->
                    <div id="step2" class="selection-step d-none">
                        <h6 class="text-success mb-3">
                            <span class="badge bg-success me-2">2</span>
                            Select Color for "<span id="selectedProductName"></span>"
                        </h6>
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            Choose from available colors
                        </div>
                        <div id="colorsGrid" class="row">
                            <div class="col-12 text-center py-3">
                                <div class="spinner-border" role="status"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Step 3: Sizes -->
                    <div id="step3" class="selection-step d-none">
                        <h6 class="text-warning mb-3">
                            <span class="badge bg-warning text-dark me-2">3</span>
                            Select Size for "<span id="selectedColorDisplay"></span>"
                        </h6>
                        <div class="alert alert-warning">
                            <i class="fas fa-ruler me-2"></i>
                            Available sizes with stock levels
                        </div>
                        <div id="sizesGrid" class="row">
                            <div class="col-12 text-center py-3">
                                <div class="spinner-border" role="status"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Step 4: Add to Cart -->
                    <div id="step4" class="selection-step d-none">
                        <h6 class="text-info mb-3">
                            <span class="badge bg-info me-2">4</span>
                            Add to Cart
                        </h6>
                        <div class="card bg-light">
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-8">
                                        <h6 id="finalProductDisplay" class="text-primary"></h6>
                                        <div class="row mb-3">
                                            <div class="col">
                                                <strong>Price:</strong> <span id="finalPrice">₹0.00</span>
                                            </div>
                                            <div class="col">
                                                <strong>With GST:</strong> <span id="finalPriceWithGST">₹0.00</span>
                                            </div>
                                            <div class="col">
                                                <strong>Stock:</strong> <span id="finalStock">0</span>
                                            </div>
                                        </div>
                                        
                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label class="form-label">Quantity</label>
                                                <div class="input-group">
                                                    <button type="button" class="btn btn-outline-secondary" id="decreaseQty">-</button>
                                                    <input type="number" class="form-control text-center" id="addQuantity" 
                                                           min="0.001" step="0.001" value="1">
                                                    <span class="input-group-text" id="quantityUnit">Piece</span>
                                                    <button type="button" class="btn btn-outline-secondary" id="increaseQty">+</button>
                                                </div>
                                                <small class="text-muted">Max: <span id="maxQuantity">0</span></small>
                                            </div>
                                            <div class="col-md-6 mb-3">
                                                <label class="form-label">Item Discount (%)</label>
                                                <div class="input-group">
                                                    <input type="number" class="form-control" id="addDiscount" 
                                                           min="0" max="100" step="0.01" value="0">
                                                    <span class="input-group-text">%</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-4 text-center">
                                        <button type="button" class="btn btn-success btn-lg mb-2" id="addToCartBtn" disabled>
                                            <i class="fas fa-cart-plus me-2"></i>
                                            Add to Cart
                                        </button>
                                        <br>
                                        <button type="button" class="btn btn-outline-secondary" id="startOverBtn">
                                            <i class="fas fa-undo me-2"></i>
                                            Start Over
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right Panel: Cart and Checkout -->
        <div class="col-lg-4">
            <!-- Shopping Cart -->
            <div class="card shadow mb-4">
                <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-shopping-cart me-2"></i>Shopping Cart
                    </h5>
                    <span class="badge bg-light text-dark" id="cartItemCount">0</span>
                </div>
                <div class="card-body" style="max-height: 400px; overflow-y: auto;">
                    <div id="cartItemsContainer">
                        <div class="text-center text-muted py-4" id="emptyCartMessage">
                            <i class="fas fa-shopping-cart fa-3x mb-3 opacity-50"></i>
                            <h6>Cart is empty</h6>
                            <p class="small">Add products to start billing</p>
                        </div>
                    </div>
                </div>
                <div class="card-footer">
                    <!-- Cart Totals -->
                    <div class="mb-3">
                        <div class="d-flex justify-content-between">
                            <span>Subtotal:</span>
                            <span id="cartSubtotal">₹0.00</span>
                        </div>
                        <div class="d-flex justify-content-between text-success">
                            <span>Discounts:</span>
                            <span id="cartDiscounts">₹0.00</span>
                        </div>
                        <div class="d-flex justify-content-between">
                            <span>GST:</span>
                            <span id="cartGST">₹0.00</span>
                        </div>
                        <hr>
                        <div class="d-flex justify-content-between">
                            <h5><strong>Total:</strong></h5>
                            <h5 class="text-primary"><strong id="cartTotal">₹0.00</strong></h5>
                        </div>
                    </div>

                    <!-- Overall Discount -->
                    <div class="mb-3">
                        <label class="form-label small">Overall Discount (%):</label>
                        <div class="input-group input-group-sm">
                            <input type="number" class="form-control" id="overallDiscountInput" 
                                   min="0" max="100" step="0.01" value="0">
                            <button class="btn btn-outline-primary" type="button" id="applyOverallDiscountBtn">
                                Apply
                            </button>
                        </div>
                    </div>

                    <!-- Cart Actions -->
                    <div class="d-grid">
                        <button type="button" class="btn btn-outline-danger btn-sm" id="clearCartBtn">
                            <i class="fas fa-trash me-1"></i>Clear Cart
                        </button>
                    </div>
                </div>
            </div>

            <!-- Checkout -->
            <div class="card shadow">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-credit-card me-2"></i>Complete Sale
                    </h5>
                </div>
                <div class="card-body">
                    <form asp-action="Create" method="post" id="saleForm">
                        @Html.AntiForgeryToken()
                        
                        <!-- Customer Information -->
                        <div class="mb-3">
                            <h6 class="text-info mb-2">Customer Information</h6>
                            <div class="mb-2">
                                <label asp-for="Sale.CustomerName" class="form-label">Name</label>
                                <input asp-for="Sale.CustomerName" class="form-control form-control-sm" 
                                       placeholder="Customer name (optional)">
                            </div>
                            <div class="mb-2">
                                <label asp-for="Sale.CustomerPhone" class="form-label">Phone</label>
                                <input asp-for="Sale.CustomerPhone" class="form-control form-control-sm" 
                                       placeholder="Phone number (optional)">
                            </div>
                        </div>

                        <!-- Payment Information -->
                        <div class="mb-3">
                            <h6 class="text-info mb-2">Payment Details</h6>
                            <div class="mb-2">
                                <label asp-for="Sale.PaymentMethod" class="form-label">Method *</label>
                                <select asp-for="Sale.PaymentMethod" class="form-select form-select-sm" 
                                        asp-items="ViewBag.PaymentMethods" required>
                                </select>
                            </div>
                            <div class="mb-2">
                                <label asp-for="Sale.PaymentReference" class="form-label">Reference</label>
                                <input asp-for="Sale.PaymentReference" class="form-control form-control-sm" 
                                       placeholder="Transaction ID, etc.">
                            </div>
                        </div>

                        <!-- Final Summary -->
                        <div class="mb-3">
                            <h6 class="text-info mb-2">Order Summary</h6>
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    <tr>
                                        <td>Subtotal:</td>
                                        <td class="text-end" id="finalSubtotal">₹0.00</td>
                                    </tr>
                                    <tr class="text-success">
                                        <td>Discounts:</td>
                                        <td class="text-end" id="finalDiscounts">₹0.00</td>
                                    </tr>
                                    <tr>
                                        <td>GST:</td>
                                        <td class="text-end" id="finalGST">₹0.00</td>
                                    </tr>
                                    <tr class="table-primary">
                                        <td><strong>Total:</strong></td>
                                        <td class="text-end"><strong id="finalTotal">₹0.00</strong></td>
                                    </tr>
                                </table>
                            </div>
                        </div>

                        <div class="d-grid">
                            <button type="submit" class="btn btn-success" id="completeSaleBtn" disabled>
                                <i class="fas fa-check me-2"></i>Complete Sale
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
    // Global variables
    let currentStep = 1;
    let selectedProduct = null;
    let selectedColor = null;
    let selectedSize = null;
    let cartItems = [];

    $(document).ready(function() {
        // Initialize
        loadProductNames();
        loadCart();
        setupEventHandlers();
    });

    function setupEventHandlers() {
        // Search and filters
        $('#categoryFilter').change(() => loadProductNames());
        $('#productSearch').on('input', debounce(() => loadProductNames(), 300));
        $('#searchBtn').click(() => loadProductNames());

        // Quantity controls
        $('#decreaseQty').click(function() {
            let qty = parseFloat($('#addQuantity').val()) || 1;
            let step = parseFloat($('#addQuantity').attr('step')) || 1;
            if (qty > step) {
                $('#addQuantity').val((qty - step).toFixed(3));
            }
        });

        $('#increaseQty').click(function() {
            let qty = parseFloat($('#addQuantity').val()) || 0;
            let step = parseFloat($('#addQuantity').attr('step')) || 1;
            let max = parseFloat($('#maxQuantity').text()) || 0;
            if (qty + step <= max) {
                $('#addQuantity').val((qty + step).toFixed(3));
            }
        });

        // Cart actions
        $('#addToCartBtn').click(() => addToCart());
        $('#startOverBtn').click(() => resetSelection());
        $('#applyOverallDiscountBtn').click(() => applyOverallDiscount());
        $('#clearCartBtn').click(() => {
            if (confirm('Clear entire cart?')) clearCart();
        });

        // Form validation
        $('#saleForm').submit(function(e) {
            if (cartItems.length === 0) {
                e.preventDefault();
                showAlert('Please add items to cart before completing sale.', 'warning');
            }
        });
    }

    // STEP 1: Load product names
    function loadProductNames() {
        const categoryId = $('#categoryFilter').val();
        const searchTerm = $('#productSearch').val();

        $('#productNamesGrid').html(`
            <div class="col-12 text-center py-4">
                <div class="spinner-border text-primary" role="status"></div>
                <p class="mt-2 text-muted">Loading products...</p>
            </div>
        `);

        $.get('@Url.Action("GetProductNames")', {
            categoryId: categoryId || null,
            searchTerm: searchTerm || null
        })
        .done(function(response) {
            if (response.success) {
                renderProductNames(response.productNames);
            } else {
                showAlert('Error: ' + response.message, 'danger');
                $('#productNamesGrid').html('<div class="col-12"><p class="text-danger">Error loading products</p></div>');
            }
        })
        .fail(function() {
            showAlert('Failed to load products. Please try again.', 'danger');
            $('#productNamesGrid').html('<div class="col-12"><p class="text-danger">Failed to load products</p></div>');
        });
    }

    function renderProductNames(productNames) {
        const grid = $('#productNamesGrid');
        $('#productCount').text(`(${productNames.length} products)`);

        if (productNames.length === 0) {
            grid.html('<div class="col-12"><p class="text-muted">No products found</p></div>');
            return;
        }

        let html = '';
        productNames.forEach(product => {
            const priceDisplay = product.minPrice === product.maxPrice ? 
                `₹${product.minPrice.toFixed(2)}` : 
                `₹${product.minPrice.toFixed(2)} - ₹${product.maxPrice.toFixed(2)}`;

        html += `
                <div class="col-md-6 col-xl-4 mb-3">
                    <div class="card product-card h-100"
                         onclick="selectProductName(&quot;${product.name.replace(/"/g, '&quot;')}&quot;)">
                        <div class="card-body p-3">
                            <h6 class="card-title">${product.name}</h6>
                            <p class="card-text small text-muted mb-2">${product.categoryName}</p>
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <strong>${priceDisplay}</strong><br>
                                    <small class="text-muted">+${product.gstRate}% GST</small>
                                </div>
                                <div class="text-end">
                                    <span class="badge bg-success">${Math.round(product.totalStock)}</span><br>
                                    <small class="text-muted">${product.totalVariants} variants</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>`;

        });

        grid.html(html);
    }

    // STEP 2: Select product and load colors
    function selectProductName(productName) {
        selectedProduct = productName;
        $('#selectedProductName').text(productName);
        
        showStep(2);
        loadColors(productName);
    }

    function loadColors(productName) {
        $('#colorsGrid').html('<div class="col-12 text-center py-3"><div class="spinner-border"></div><p>Loading colors...</p></div>');

        $.get('@Url.Action("GetProductColors")', { productName: productName })
        .done(function(response) {
            if (response.success) {
                renderColors(response.colors);
            } else {
                showAlert('Error: ' + response.message, 'danger');
                $('#colorsGrid').html('<div class="col-12"><p class="text-danger">Error loading colors</p></div>');
            }
        })
        .fail(function() {
            showAlert('Failed to load colors', 'danger');
            $('#colorsGrid').html('<div class="col-12"><p class="text-danger">Failed to load colors</p></div>');
        });
    }

    function renderColors(colors) {
        const grid = $('#colorsGrid');

        if (colors.length === 0) {
            grid.html('<div class="col-12"><p class="text-muted">No colors available</p></div>');
            return;
        }

        let html = '';
        colors.forEach(color => {
            const priceDisplay = color.minPrice === color.maxPrice ? 
                `₹${color.minPrice.toFixed(2)}` : 
                `₹${color.minPrice.toFixed(2)} - ₹${color.maxPrice.toFixed(2)}`;

            html += `
                <div class="col-md-4 col-sm-6 mb-3">
                    <div class="card color-card h-100" onclick="selectColor('${color.color}')">
                        <div class="card-body p-3 text-center">
                            <h6 class="card-title">${color.color}</h6>
                            <p class="mb-1"><strong>${priceDisplay}</strong></p>
                            <p class="mb-0">
                                <span class="badge bg-info">${Math.round(color.totalStock)} units</span><br>
                                <small class="text-muted">${color.variantCount} sizes</small>
                            </p>
                        </div>
                    </div>
                </div>
            `;
        });

        grid.html(html);
    }

    // STEP 3: Select color and load sizes
    function selectColor(color) {
        selectedColor = color;
        $('#selectedColorDisplay').text(`${selectedProduct} - ${color}`);
        
        showStep(3);
        loadSizes(selectedProduct, color);
    }

    function loadSizes(productName, color) {
        $('#sizesGrid').html('<div class="col-12 text-center py-3"><div class="spinner-border"></div><p>Loading sizes...</p></div>');

        $.get('@Url.Action("GetProductSizes")', { 
            productName: productName, 
            color: color 
        })
        .done(function(response) {
            if (response.success) {
                renderSizes(response.sizes);
            } else {
                showAlert('Error: ' + response.message, 'danger');
                $('#sizesGrid').html('<div class="col-12"><p class="text-danger">Error loading sizes</p></div>');
            }
        })
        .fail(function() {
            showAlert('Failed to load sizes', 'danger');
            $('#sizesGrid').html('<div class="col-12"><p class="text-danger">Failed to load sizes</p></div>');
        });
    }

    function renderSizes(sizes) {
        const grid = $('#sizesGrid');

        if (sizes.length === 0) {
            grid.html('<div class="col-12"><p class="text-muted">No sizes available</p></div>');
            return;
        }

        let html = '';
        sizes.forEach(size => {
            const stockBadge = size.isLowStock ? 'bg-warning' : 'bg-success';

            html += `
                <div class="col-md-4 col-sm-6 mb-3">
                    <div class="card size-card h-100" onclick="selectSize(${JSON.stringify(size).replace(/"/g, '&quot;')})">
                        <div class="card-body p-3 text-center">
                            <h6 class="card-title">${size.size}</h6>
                            <p class="mb-1"><strong>₹${size.salePrice.toFixed(2)}</strong></p>
                            <p class="mb-1"><small>₹${size.priceWithGST.toFixed(2)} with GST</small></p>
                            <span class="badge ${stockBadge}">${size.displayStock}</span><br>
                            <small class="text-muted">${size.stockStatus}</small>
                        </div>
                    </div>
                </div>
            `;
        });

        grid.html(html);
    }

    // STEP 4: Select size and prepare to add to cart
    function selectSize(sizeData) {
        selectedSize = sizeData;
        
        $('#finalProductDisplay').text(`${selectedProduct} - ${selectedColor} (${sizeData.size})`);
        $('#finalPrice').text(`₹${sizeData.salePrice.toFixed(2)}`);
        $('#finalPriceWithGST').text(`₹${sizeData.priceWithGST.toFixed(2)}`);
        $('#finalStock').text(sizeData.displayStock);
        $('#maxQuantity').text(sizeData.stockQuantity);
        $('#quantityUnit').text(sizeData.unitOfMeasure);
        
        $('#addQuantity').attr('max', sizeData.stockQuantity);
        $('#addQuantity').val('1');
        $('#addDiscount').val('0');
        
        $('#addToCartBtn').prop('disabled', false);
        
        showStep(4);
    }

    // Add to cart
    function addToCart() {
        if (!selectedSize) return;

        const quantity = parseFloat($('#addQuantity').val()) || 0;
        const discount = parseFloat($('#addDiscount').val()) || 0;

        if (quantity <= 0) {
            showAlert('Please enter a valid quantity', 'warning');
            return;
        }

        if (quantity > selectedSize.stockQuantity) {
            showAlert(`Quantity exceeds available stock (${selectedSize.stockQuantity})`, 'warning');
            return;
        }

        $('#addToCartBtn').prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-2"></i>Adding...');

        $.post('@Url.Action("AddToCart")', {
            productId: selectedSize.productId,
            quantity: quantity,
            discountPercentage: discount
        })
        .done(function(response) {
            if (response.success) {
                showAlert(response.message, 'success');
                loadCart();
                resetSelection();
            } else {
                showAlert(response.message, 'danger');
            }
        })
        .fail(function() {
            showAlert('Failed to add to cart', 'danger');
        })
        .always(function() {
            $('#addToCartBtn').prop('disabled', false).html('<i class="fas fa-cart-plus me-2"></i>Add to Cart');
        });
    }

    // Cart management
    function loadCart() {
        $.get('@Url.Action("GetCart")')
        .done(function(response) {
            if (response.success) {
                cartItems = response.items;
                renderCart();
                updateTotals(response.summary);
            }
        });
    }

    function renderCart() {
        const container = $('#cartItemsContainer');
        $('#cartItemCount').text(cartItems.length);

        if (cartItems.length === 0) {
            container.html(`
                <div class="text-center text-muted py-4" id="emptyCartMessage">
                    <i class="fas fa-shopping-cart fa-3x mb-3 opacity-50"></i>
                    <h6>Cart is empty</h6>
                    <p class="small">Add products to start billing</p>
                </div>
            `);
            $('#completeSaleBtn').prop('disabled', true);
            return;
        }

        let html = '';
        cartItems.forEach(item => {
            html += `
                <div class="card mb-2">
                    <div class="card-body p-2">
                        <div class="d-flex justify-content-between align-items-start mb-2">
                            <h6 class="mb-0 small">${item.productName}</h6>
                            <button class="btn btn-outline-danger btn-sm" onclick="removeFromCart(${item.productId})">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                        <div class="row g-2">
                            <div class="col-4">
                                <label class="form-label small">Qty:</label>
                                <input type="number" class="form-control form-control-sm" 
                                       value="${item.quantity}" min="0.001" step="0.001"
                                       onchange="updateQuantity(${item.productId}, this.value)">
                            </div>
                            <div class="col-4">
                                <label class="form-label small">Disc%:</label>
                                <input type="number" class="form-control form-control-sm" 
                                       value="${item.itemDiscountPercentage}" min="0" max="100" step="0.01"
                                       onchange="updateDiscount(${item.productId}, this.value)">
                            </div>
                            <div class="col-4 text-end">
                                <small class="text-muted">₹${item.unitPrice.toFixed(2)}</small><br>
                                <strong>₹${item.lineTotal.toFixed(2)}</strong>
                                ${item.hasDiscount ? `<br><small class="text-success">-₹${item.itemDiscountAmount.toFixed(2)}</small>` : ''}
                            </div>
                        </div>
                    </div>
                </div>
            `;
        });

        container.html(html);
        $('#completeSaleBtn').prop('disabled', false);
    }

    function updateTotals(totals) {
        $('#cartSubtotal, #finalSubtotal').text(`₹${totals.subtotal.toFixed(2)}`);
        $('#cartDiscounts, #finalDiscounts').text(`₹${totals.discountAmount.toFixed(2)}`);
        $('#cartGST, #finalGST').text(`₹${totals.gstAmount.toFixed(2)}`);
        $('#cartTotal, #finalTotal').text(`₹${totals.total.toFixed(2)}`);
    }

    // Cart operations
    function updateQuantity(productId, quantity) {
        $.post('@Url.Action("UpdateCartQuantity")', { 
            productId: productId, 
            quantity: parseFloat(quantity) || 0 
        })
        .done(function(response) {
            if (response.success) {
                loadCart();
            } else {
                showAlert(response.message, 'warning');
                loadCart();
            }
        });
    }

    function updateDiscount(productId, discountPercentage) {
        $.post('@Url.Action("ApplyItemDiscount")', { 
            productId: productId, 
            discountPercentage: parseFloat(discountPercentage) || 0 
        })
        .done(function(response) {
            if (response.success) {
                loadCart();
            } else {
                showAlert(response.message, 'warning');
            }
        });
    }

    function removeFromCart(productId) {
        $.post('@Url.Action("RemoveFromCart")', { productId: productId })
        .done(function(response) {
            if (response.success) {
                showAlert(response.message, 'info');
                loadCart();
            }
        });
    }

    function applyOverallDiscount() {
        const discount = parseFloat($('#overallDiscountInput').val()) || 0;
        
        if (discount < 0 || discount > 100) {
            showAlert('Discount must be between 0 and 100%', 'warning');
            return;
        }

        $.post('@Url.Action("ApplyOverallDiscount")', { discountPercentage: discount })
        .done(function(response) {
            if (response.success) {
                showAlert(response.message, 'success');
                loadCart();
            } else {
                showAlert(response.message, 'danger');
            }
        });
    }

    function clearCart() {
        $.post('@Url.Action("ClearCart")')
        .done(function(response) {
            if (response.success) {
                showAlert(response.message, 'info');
                loadCart();
            }
        });
    }

    // UI helpers
    function showStep(stepNumber) {
        $('.selection-step').addClass('d-none');
        $(`#step${stepNumber}`).removeClass('d-none');
        currentStep = stepNumber;
    }

    function resetSelection() {
        selectedProduct = null;
        selectedColor = null;
        selectedSize = null;
        showStep(1);
        loadProductNames();
    }

    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    function showAlert(message, type) {
        // Simple alert for now - you can enhance this
        const alertClass = type === 'danger' ? 'alert-danger' : 
                          type === 'success' ? 'alert-success' : 
                          type === 'warning' ? 'alert-warning' : 'alert-info';

        const alertHtml = `
            <div class="alert ${alertClass} alert-dismissible fade show position-fixed" 
                 style="top: 20px; right: 20px; z-index: 9999; min-width: 300px;">
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        `;

        $('body').append(alertHtml);

        // Auto-remove after 5 seconds
        setTimeout(() => {
            $('.alert').fadeOut();
        }, 5000);
    }
</script>

<style>
    .product-card:hover,
    .color-card:hover,
    .size-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .selection-step {
        margin-bottom: 2rem;
        padding: 1rem;
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        background-color: #f8f9fa;
    }

    .card {
        border: 1px solid #dee2e6;
    }

    .badge {
        font-size: 0.75em;
    }

    .spinner-border {
        width: 1rem;
        height: 1rem;
    }

    @@media (max-width: 768px) {
        .card-body {
            padding: 0.75rem;
        }
        
        .selection-step {
            padding: 0.5rem;
        }
    }
</style>
}