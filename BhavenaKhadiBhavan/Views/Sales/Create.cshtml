@model SalesViewModel
@{
    ViewData["Title"] = "New Sale";
}

<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h2><i class="fas fa-cash-register me-2"></i>New Sale</h2>
            <div>
                <button type="button" class="btn btn-outline-secondary" onclick="clearCart()">
                    <i class="fas fa-trash me-1"></i>Clear Cart
                </button>
                <a href="@Url.Action("Index", "Sales")" class="btn btn-outline-primary">
                    <i class="fas fa-list me-1"></i>View Sales
                </a>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <!-- Product Selection Area -->
    <div class="col-lg-8" id="productSelectionArea">
        <!-- Search and Filters -->
        <div class="card mb-3">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="input-group">
                            <span class="input-group-text"><i class="fas fa-search"></i></span>
                            <input type="text" class="form-control search-box" id="productSearch"
                                   placeholder="Search products by name, SKU, or color...">
                        </div>
                    </div>
                    <div class="col-md-4">
                        <select class="form-select" id="categoryFilter">
                            <option value="">All Categories</option>
                            @foreach (var category in Model.Categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-2">
                        <select class="form-select" id="stockFilter">
                            <option value="">All Stock</option>
                            <option value="instock">In Stock</option>
                            <option value="lowstock">Low Stock</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>

        <div class="card mb-4 border-primary">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">
                    <i class="fas fa-barcode"></i> Quick Add with Barcode Scanner
                    <span class="badge badge-light text-primary ms-2">New!</span>
                </h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <!-- Camera Scanner -->
                    <div class="col-md-6">
                        <div class="text-center mb-3">
                            <button type="button" class="btn btn-success btn-lg" id="startScanner">
                                <i class="fas fa-camera"></i> Start Camera Scanner
                            </button>
                            <button type="button" class="btn btn-danger btn-lg d-none" id="stopScanner">
                                <i class="fas fa-stop"></i> Stop Scanner
                            </button>
                        </div>

                        <!-- Camera Preview Area -->
                        <div id="scannerContainer" class="position-relative border rounded d-none" style="height: 300px;">
                            <video id="scannerVideo" class="w-100 h-100 object-fit-cover"></video>
                            <div id="scannerOverlay" class="position-absolute top-0 start-0 w-100 h-100">
                                <!-- Scanning reticle will be drawn here -->
                                <div class="scanner-line"></div>
                            </div>
                            <div id="scannerStatus" class="position-absolute bottom-0 start-0 w-100 bg-dark bg-opacity-75 text-white text-center py-2">
                                <small>Position barcode in the frame</small>
                            </div>
                        </div>
                    </div>

                    <!-- Manual Entry & Results -->
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="manualBarcodeInput" class="form-label">
                                <i class="fas fa-keyboard"></i> Manual SKU/Barcode Entry
                            </label>
                            <div class="input-group">
                                <input type="text" class="form-control" id="manualBarcodeInput"
                                       placeholder="Enter SKU (e.g., KHD-CK-W-M-001) or barcode">
                                <button class="btn btn-outline-primary" type="button" id="searchByCodeBtn">
                                    <i class="fas fa-search"></i> Search
                                </button>
                            </div>
                            <small class="form-text text-muted">
                                You can also scan or type product codes here
                            </small>
                        </div>

                        <!-- Scanned Product Preview -->
                        <div id="scannedProductPreview" class="d-none">
                            <div class="card border-success">
                                <div class="card-body">
                                    <h6 class="card-title text-success">
                                        <i class="fas fa-check-circle"></i> Product Found
                                    </h6>
                                    <div id="productDetails">
                                        <!-- Product details will be populated here -->
                                    </div>
                                    <div class="mt-3">
                                        <div class="row">
                                            <div class="col-6">
                                                <label class="form-label">Quantity</label>
                                                <input type="number" class="form-control" id="scannedQuantity"
                                                       value="1" min="0.001" step="0.001">
                                            </div>
                                            <div class="col-6">
                                                <label class="form-label">Discount %</label>
                                                <input type="number" class="form-control" id="scannedDiscount"
                                                       value="0" min="0" max="100" step="0.01">
                                            </div>
                                        </div>
                                        <div class="mt-2">
                                            <button type="button" class="btn btn-success w-100" id="addScannedToCart">
                                                <i class="fas fa-cart-plus"></i> Add to Cart
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Scanner Messages -->
                        <div id="scannerMessages">
                            <!-- Success/Error messages will appear here -->
                        </div>
                    </div>
                </div>
            </div>
        </div>


        <!-- Step-by-Step Product Selection -->
        <div class="card mb-3">
            <div class="card-header bg-primary text-white">
                <h6 class="mb-0"><i class="fas fa-plus-circle me-2"></i>Add Items to Cart</h6>
            </div>
            <div class="card-body">
                <div class="row">
                    <!-- Step 1: Product Name -->
                    <div class="col-md-4 mb-3">
                        <label for="productNameSelect" class="form-label">
                            <i class="fas fa-tshirt me-1"></i>1. Product Name
                        </label>
                        <select class="form-select" id="productNameSelect">
                            <option value="">Select Product...</option>
                        </select>
                        <div class="mt-2" id="productNameInfo" style="display:none;">
                            <small class="text-muted">
                                <i class="fas fa-info-circle me-1"></i>
                                <span id="productNameDetails"></span>
                            </small>
                        </div>
                    </div>

                    <!-- Step 2: Color -->
                    <div class="col-md-2 mb-3">
                        <label for="colorSelect" class="form-label">
                            <i class="fas fa-palette me-1"></i>2. Color
                        </label>
                        <select class="form-select" id="colorSelect" disabled>
                            <option value="">Select Color...</option>
                        </select>
                    </div>

                    <!-- Step 3: Size -->
                    <div class="col-md-2 mb-3">
                        <label for="sizeSelect" class="form-label">
                            <i class="fas fa-expand-arrows-alt me-1"></i>3. Size
                        </label>
                        <select class="form-select" id="sizeSelect" disabled>
                            <option value="">Select Size...</option>
                        </select>
                    </div>

                    <!-- Step 4: Quantity -->
                    <div class="col-md-2 mb-3">
                        <label for="quantityInput" class="form-label">
                            <i class="fas fa-sort-numeric-up me-1"></i>4. Quantity
                        </label>
                        <input type="number" class="form-control" id="quantityInput"
                               min="0.001" step="0.001" value="1" disabled>
                        <small class="text-muted" id="stockInfo"></small>
                    </div>

                    <!-- Step 5: Discount -->
                    <div class="col-md-2 mb-3">
                        <label for="discountInput" class="form-label">
                            <i class="fas fa-percentage me-1"></i>5. Discount %
                        </label>
                        <input type="number" class="form-control" id="discountInput"
                               min="0" max="100" step="0.01" value="0" disabled>
                        <small class="text-muted">Optional</small>
                    </div>
                </div>

                <!-- Product Details Display -->
                <div id="selectedProductInfo" class="alert alert-info" style="display:none;">
                    <div class="row">
                        <div class="col-md-8">
                            <h6 id="selectedProductName"></h6>
                            <div class="row">
                                <div class="col-md-3">
                                    <small class="text-muted">Price:</small><br>
                                    <strong id="selectedProductPrice"></strong>
                                </div>
                                <div class="col-md-3">
                                    <small class="text-muted">Stock:</small><br>
                                    <span id="selectedProductStock"></span>
                                </div>
                                <div class="col-md-3">
                                    <small class="text-muted">GST Rate:</small><br>
                                    <span id="selectedProductGST"></span>
                                </div>
                                <div class="col-md-3">
                                    <small class="text-muted">Unit:</small><br>
                                    <span id="selectedProductUnit"></span>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4 text-end">
                            <div class="mt-2">
                                <button type="button" class="btn btn-success" id="addToCartBtn" disabled>
                                    <i class="fas fa-cart-plus me-2"></i>Add to Cart
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Shopping Cart Area -->
    <div class="col-lg-4" id="cartArea">
        <!-- Cart -->
        <div class="card sticky-top">
            <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
                <h6 class="mb-0"><i class="fas fa-shopping-cart me-2"></i>Shopping Cart</h6>
                <span class="badge bg-light text-dark" id="cartCount">0</span>
            </div>
            <div class="card-body">
                <div id="cartItems">
                    <div class="text-center text-muted py-4">
                        <i class="fas fa-shopping-cart fa-3x mb-3"></i>
                        <div>Cart is empty</div>
                        <small>Add products to get started</small>
                    </div>
                </div>

                <!-- Cart Summary -->
                <div id="cartSummary" style="display:none;">
                    <hr>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Subtotal:</span>
                        <span class="fw-bold">₹<span id="cartSubtotal">0.00</span></span>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Discount:</span>
                        <span class="text-success">-₹<span id="cartDiscount">0.00</span></span>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>GST:</span>
                        <span>₹<span id="cartGST">0.00</span></span>
                    </div>
                    <hr>
                    <div class="d-flex justify-content-between mb-3">
                        <strong>Total:</strong>
                        <strong class="text-primary fs-5">₹<span id="cartTotal">0.00</span></strong>
                    </div>
                </div>

                <!-- Customer Information -->
                <div id="customerSection" style="display:none;">
                    <h6 class="text-primary mb-3"><i class="fas fa-user me-2"></i>Customer Information</h6>

                    <div class="mb-3">
                        <label class="form-label">Customer Phone</label>
                        <input type="text" class="form-control" id="customerPhone" placeholder="Enter phone number">
                        <div class="mt-1">
                            <button type="button" class="btn btn-sm btn-outline-primary" onclick="searchCustomer()">
                                <i class="fas fa-search me-1"></i>Search
                            </button>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Customer Name</label>
                        <input type="text" class="form-control" id="customerName" placeholder="Enter customer name">
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Payment Method</label>
                        <select class="form-select" id="paymentMethod">
                            <option value="Cash">Cash</option>
                            <option value="Card">Card</option>
                            <option value="UPI">UPI</option>
                            <option value="Bank Transfer">Bank Transfer</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Payment Reference (Optional)</label>
                        <input type="text" class="form-control" id="paymentReference" placeholder="Transaction ID, Check No., etc.">
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Notes (Optional)</label>
                        <textarea class="form-control" id="saleNotes" rows="2" placeholder="Any additional notes..."></textarea>
                    </div>

                    <!-- Checkout Button -->
                    <div class="d-grid">
                        <button type="button" class="btn btn-primary btn-lg" onclick="showPaymentSection()">
                            <i class="fas fa-credit-card me-2"></i>Proceed to Payment
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- ENHANCED PAYMENT PROCESSING SECTION -->
<div class="row mt-4" id="paymentSection" style="display: none;">
    <div class="col-12">
        <div class="card shadow-lg border-success">
            <div class="card-header bg-success text-white">
                <h5 class="mb-0">
                    <i class="fas fa-cash-register me-2"></i>Payment Processing
                </h5>
            </div>
            <div class="card-body">
                <form asp-action="CreateWithPayment" method="post" id="paymentForm">
                    @Html.AntiForgeryToken()

                    <!-- Hidden fields for sale data -->
                    <div id="hiddenFormFields"></div>

                    <div class="row">
                        <!-- Bill Summary -->
                        <div class="col-md-6">
                            <h6 class="text-primary mb-3">
                                <i class="fas fa-calculator me-2"></i>Bill Summary
                            </h6>

                            <div class="payment-summary bg-light p-3 rounded">
                                <div class="d-flex justify-content-between mb-2">
                                    <span>Subtotal:</span>
                                    <span class="fw-bold">₹<span id="paymentSubtotal">0.00</span></span>
                                </div>
                                <div class="d-flex justify-content-between mb-2">
                                    <span>Discount:</span>
                                    <span class="text-success">-₹<span id="paymentDiscount">0.00</span></span>
                                </div>
                                <div class="d-flex justify-content-between mb-2">
                                    <span>GST:</span>
                                    <span>₹<span id="paymentGST">0.00</span></span>
                                </div>
                                <hr>
                                <div class="d-flex justify-content-between mb-0">
                                    <strong>Total Amount:</strong>
                                    <strong class="text-primary fs-4">₹<span id="calculatedTotal">0.00</span></strong>
                                </div>
                                <small class="text-muted">Amount customer should pay</small>
                            </div>
                        </div>

                        <!-- Payment Input -->
                        <div class="col-md-6">
                            <h6 class="text-success mb-3">
                                <i class="fas fa-money-bill-wave me-2"></i>Payment Collection
                            </h6>

                            <!-- Amount Received Input -->
                            <div class="mb-3">
                                <label for="amountReceived" class="form-label">
                                    <i class="fas fa-rupee-sign me-1"></i>Amount Received from Customer *
                                </label>
                                <div class="input-group input-group-lg">
                                    <span class="input-group-text bg-success text-white">₹</span>
                                    <input type="number" name="AmountReceived" id="amountReceived" class="form-control"
                                           placeholder="0.00" step="0.01" min="0"
                                           onkeyup="calculatePaymentAdjustment()"
                                           onchange="calculatePaymentAdjustment()"
                                           style="font-size: 1.5rem; font-weight: bold;" />
                                </div>
                                <div class="mt-2">
                                    <button type="button" class="btn btn-sm btn-outline-primary me-1" onclick="suggestRoundedAmount('exact')">
                                        Exact
                                    </button>
                                    <button type="button" class="btn btn-sm btn-outline-secondary me-1" onclick="suggestRoundedAmount('round5')">
                                        Round ₹5
                                    </button>
                                    <button type="button" class="btn btn-sm btn-outline-secondary" onclick="suggestRoundedAmount('round10')">
                                        Round ₹10
                                    </button>
                                </div>
                            </div>

                            <!-- Payment Adjustment Display -->
                            <div id="adjustmentAlert" class="alert" style="display: none;">
                                <div class="d-flex align-items-center">
                                    <i class="fas fa-info-circle me-2"></i>
                                    <div>
                                        <strong>Payment Adjustment:</strong>
                                        <div id="adjustmentDisplay" class="mt-1"></div>
                                    </div>
                                </div>
                            </div>

                            <!-- Manager Approval Required -->
                            <div id="approvalAlert" class="alert alert-warning" style="display: none;">
                                <div class="d-flex align-items-center">
                                    <i class="fas fa-exclamation-triangle me-2"></i>
                                    <div>
                                        <strong>Manager Approval Required</strong>
                                        <div class="small mt-1">This adjustment requires manager approval before completion.</div>
                                    </div>
                                </div>
                            </div>

                            <!-- Overpayment Alert -->
                            <div id="overpaymentAlert" class="alert alert-info" style="display: none;">
                                <div class="d-flex align-items-center">
                                    <i class="fas fa-plus-circle me-2"></i>
                                    <div>
                                        <strong>Customer Overpayment</strong>
                                        <div class="small mt-1">Customer paid more than required. No change given.</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Adjustment Reason -->
                    <div class="row mt-3" id="adjustmentReasonRow" style="display: none;">
                        <div class="col-12">
                            <label for="paymentAdjustmentReason" class="form-label">
                                <i class="fas fa-comment me-1"></i>Reason for Payment Adjustment
                            </label>
                            <select name="PaymentAdjustmentReason" id="paymentAdjustmentReason" class="form-select">
                                <option value="">Select reason...</option>
                                <option value="Customer didn't have exact change">Customer didn't have exact change</option>
                                <option value="Customer short on cash">Customer short on cash</option>
                                <option value="Customer paid extra as tip">Customer paid extra as tip</option>
                                <option value="Promotional discount applied">Promotional discount applied</option>
                                <option value="Price adjustment">Price adjustment</option>
                                <option value="Goodwill adjustment">Goodwill adjustment</option>
                                <option value="Other">Other reason</option>
                            </select>
                        </div>
                    </div>

                    <!-- Action Buttons -->
                    <div class="row mt-4">
                        <div class="col-12">
                            <div class="d-flex justify-content-between">
                                <button type="button" class="btn btn-secondary btn-lg" onclick="hidePaymentSection()">
                                    <i class="fas fa-arrow-left me-2"></i>Back to Cart
                                </button>

                                <div>
                                    <button type="button" class="btn btn-outline-warning btn-lg me-2" onclick="printEstimate()">
                                        <i class="fas fa-print me-2"></i>Print Estimate
                                    </button>
                                    <button type="submit" class="btn btn-success btn-lg" id="completeSaleBtn">
                                        <i class="fas fa-check me-2"></i>Complete Sale
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/quagga/0.12.1/quagga.min.js"></script>
    <script>
        let cart = [];
        let calculatedTotal = 0;
        let currentProductId = null;

        $(document).ready(function() {
            loadProductNames();
            updateCartDisplay();

            // Product search functionality
            $('#productSearch').on('keyup', function() {
                const searchTerm = $(this).val();
                loadProductNames(searchTerm);
            });

            // Category filter
            $('#categoryFilter').on('change', function() {
                const categoryId = $(this).val();
                const searchTerm = $('#productSearch').val();
                loadProductNames(searchTerm, categoryId);
            });

            // Step-by-step product selection
            $('#productNameSelect').on('change', function() {
                loadProductColors();
            });

            $('#colorSelect').on('change', function() {
                loadProductSizes();
            });

            $('#sizeSelect').on('change', function() {
                showSelectedProduct();
            });

            $('#addToCartBtn').on('click', function() {
                addToCart();
            });
        });

        // Load product names
        function loadProductNames(searchTerm = '', categoryId = '') {
            $.get('@Url.Action("GetProductNames")', {
                searchTerm: searchTerm,
                categoryId: categoryId
            })
            .done(function(response) {
                if (response.success) {
                    updateProductNamesDropdown(response.productNames);
                }
            })
            .fail(function() {
                showToast('Error loading products', 'error');
            });
        }

        // Update product names dropdown
        function updateProductNamesDropdown(productNames) {
            const select = $('#productNameSelect');
            select.html('<option value="">Select Product...</option>');

            productNames.forEach(function(product) {
                select.append(`
                    <option value="${product.name}"
                            data-category="${product.categoryName}"
                            data-min-price="${product.minPrice}"
                            data-max-price="${product.maxPrice}"
                            data-variants="${product.totalVariants}"
                            data-stock="${product.totalStock}"
                            data-gst="${product.gstRate}">
                        ${product.name} - ${product.categoryName} (${product.totalVariants} variants)
                    </option>
                `);
            });
        }

        // Load product colors
        function loadProductColors() {
            const productName = $('#productNameSelect').val();
            if (!productName) {
                $('#colorSelect').html('<option value="">Select Color...</option>').prop('disabled', true);
                $('#sizeSelect').html('<option value="">Select Size...</option>').prop('disabled', true);
                return;
            }

            // Show product name info
            const selectedOption = $('#productNameSelect option:selected');
            $('#productNameDetails').text(`${selectedOption.data('variants')} variants, Total stock: ${selectedOption.data('stock')}`);
            $('#productNameInfo').show();

            $.get('@Url.Action("GetProductColors")', {
                productName: productName
            })
            .done(function(response) {
                if (response.success) {
                    updateColorsDropdown(response.colors);
                    $('#colorSelect').prop('disabled', false);
                }
            });
        }

        // Update colors dropdown
        function updateColorsDropdown(colors) {
            const select = $('#colorSelect');
            select.html('<option value="">Select Color...</option>');

            colors.forEach(function(color) {
                select.append(`
                    <option value="${color.color}"
                            data-variants="${color.variantCount}"
                            data-stock="${color.totalStock}"
                            data-min-price="${color.minPrice}"
                            data-max-price="${color.maxPrice}">
                        ${color.color} (Stock: ${color.totalStock})
                    </option>
                `);
            });
        }

        // Load product sizes
        function loadProductSizes() {
            const productName = $('#productNameSelect').val();
            const color = $('#colorSelect').val();

            if (!productName || !color) {
                $('#sizeSelect').html('<option value="">Select Size...</option>').prop('disabled', true);
                return;
            }

            $.get('@Url.Action("GetProductSizes")', {
                productName: productName,
                color: color
            })
            .done(function(response) {
                if (response.success) {
                    updateSizesDropdown(response.sizes);
                    $('#sizeSelect').prop('disabled', false);
                }
            });
        }

        // Update sizes dropdown
        function updateSizesDropdown(sizes) {
            const select = $('#sizeSelect');
            select.html('<option value="">Select Size...</option>');

            sizes.forEach(function(size) {
                select.append(`
                    <option value="${size.productId}"
                            data-size="${size.size}"
                            data-price="${size.salePrice}"
                            data-stock="${size.stockQuantity}"
                            data-gst="${size.gstRate}"
                            data-unit="${size.unitOfMeasure}"
                            data-low-stock="${size.isLowStock}">
                        ${size.size} - ₹${size.salePrice} (Stock: ${size.displayStock})
                    </option>
                `);
            });
        }

        // Show selected product details
        function showSelectedProduct() {
            const selectedOption = $('#sizeSelect option:selected');
            const productId = selectedOption.val();

            if (!productId) {
                $('#selectedProductInfo').hide();
                $('#quantityInput, #discountInput, #addToCartBtn').prop('disabled', true);
                return;
            }

            currentProductId = productId;
            const productName = $('#productNameSelect').val();
            const color = $('#colorSelect').val();
            const size = selectedOption.data('size');
            const price = selectedOption.data('price');
            const stock = selectedOption.data('stock');
            const gstRate = selectedOption.data('gst');
            const unit = selectedOption.data('unit');
            const isLowStock = selectedOption.data('low-stock');

            // Update product info display
            $('#selectedProductName').text(`${productName} - ${color} (${size})`);
            $('#selectedProductPrice').text(`₹${price}`);
            $('#selectedProductStock').html(`${stock} ${unit} ${isLowStock ? '<span class="badge bg-warning">Low Stock</span>' : ''}`);
            $('#selectedProductGST').text(`${gstRate}%`);
            $('#selectedProductUnit').text(unit);

            // Update stock info for quantity input
            $('#stockInfo').text(`Available: ${stock} ${unit}`);
            $('#quantityInput').attr('max', stock);

            // Enable controls
            $('#quantityInput, #discountInput, #addToCartBtn').prop('disabled', false);
            $('#selectedProductInfo').show();
        }

        // Add to cart
        function addToCart() {
            const productId = currentProductId;
            const quantity = parseFloat($('#quantityInput').val()) || 1;
            const discount = parseFloat($('#discountInput').val()) || 0;

            if (!productId) {
                showToast('Please select a product first', 'error');
                return;
            }

            if (quantity <= 0) {
                showToast('Please enter a valid quantity', 'error');
                return;
            }

            // Show loading
            $('#addToCartBtn').prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-2"></i>Adding...');

            $.post('@Url.Action("AddToCart")', {
                productId: productId,
                quantity: quantity,
                discountPercentage: discount,
                __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
            })
            .done(function(response) {
                if (response.success) {
                    showToast(response.message, 'success');
                    refreshCart();
                    resetProductSelection();
                } else {
                    showToast(response.message, 'error');
                }
            })
            .fail(function() {
                showToast('Error adding item to cart', 'error');
            })
            .always(function() {
                $('#addToCartBtn').prop('disabled', false).html('<i class="fas fa-cart-plus me-2"></i>Add to Cart');
            });
        }

        // Reset product selection
        function resetProductSelection() {
            $('#productNameSelect, #colorSelect, #sizeSelect').val('');
            $('#colorSelect, #sizeSelect, #quantityInput, #discountInput, #addToCartBtn').prop('disabled', true);
            $('#selectedProductInfo, #productNameInfo').hide();
            $('#quantityInput').val('1');
            $('#discountInput').val('0');
            currentProductId = null;
        }

        // Refresh cart
        function refreshCart() {
            $.get('@Url.Action("GetCart")')
            .done(function(response) {
                if (response.success) {
                    updateCartFromResponse(response);
                }
            });
        }

        // Update cart display from response
        function updateCartFromResponse(response) {
            cart = response.items;
            updateCartDisplay();
            updateCartSummary(response.summary);
        }

        // Update cart display
        function updateCartDisplay() {
            const cartItemsContainer = $('#cartItems');
            const cartCount = $('#cartCount');

            if (cart.length === 0) {
                cartItemsContainer.html(`
                    <div class="text-center text-muted py-4">
                        <i class="fas fa-shopping-cart fa-3x mb-3"></i>
                        <div>Cart is empty</div>
                        <small>Add products to get started</small>
                    </div>
                `);
                cartCount.text('0');
                $('#cartSummary, #customerSection').hide();
                return;
            }

            let cartHtml = '';
            cart.forEach(function(item, index) {
                cartHtml += `
                    <div class="cart-item border-bottom pb-2 mb-2">
                        <div class="d-flex justify-content-between align-items-start">
                            <div class="flex-grow-1">
                                <h6 class="mb-1">${item.productName}</h6>
                                <div class="row">
                                    <div class="col-6">
                                        <small class="text-muted">Qty:</small>
                                        <input type="number" class="form-control form-control-sm"
                                               value="${item.quantity}" min="0.001" step="0.001"
                                               onchange="updateCartItemQuantity(${item.productId}, this.value)">
                                    </div>
                                    <div class="col-6">
                                        <small class="text-muted">Disc %:</small>
                                        <input type="number" class="form-control form-control-sm"
                                               value="${item.itemDiscountPercentage}" min="0" max="100" step="0.01"
                                               onchange="updateCartItemDiscount(${item.productId}, this.value)">
                                    </div>
                                </div>
                                <div class="mt-1">
                                    <small class="text-muted">
                                        ₹${item.unitPrice} × ${item.quantity} ${item.unitOfMeasure}
                                        ${item.hasDiscount ? `<span class="text-success">(-₹${item.itemDiscountAmount.toFixed(2)})</span>` : ''}
                                    </small>
                                </div>
                            </div>
                            <div class="text-end ms-2">
                                <div class="fw-bold">₹${item.lineTotal.toFixed(2)}</div>
                                <button class="btn btn-sm btn-outline-danger mt-1"
                                        onclick="removeFromCart(${item.productId})">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                `;
            });

            cartItemsContainer.html(cartHtml);
            cartCount.text(cart.length);
            $('#cartSummary, #customerSection').show();
        }

        // Update cart summary
        function updateCartSummary(summary) {
            $('#cartSubtotal').text(summary.subtotal.toFixed(2));
            $('#cartDiscount').text(summary.discountAmount.toFixed(2));
            $('#cartGST').text(summary.gstAmount.toFixed(2));
            $('#cartTotal').text(summary.total.toFixed(2));
        }

        // Update cart item quantity
                function updateCartItemQuantity(productId, quantity) {
            if (quantity <= 0) {
                removeFromCart(productId);
                return;
            }

            $.post('/Sales/UpdateCartQuantity', {
                productId: productId,
                quantity: quantity,
                __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
            })
            .done(function(response) {
                if (response.success) {
                    // **CRITICAL: Always refresh cart to get updated calculations**
                    refreshCart();
                } else {
                    showToast(response.message, 'error');
                    refreshCart(); // Revert changes
                }
            });
        }

        // Update cart item discount
        function updateCartItemDiscount(productId, discountPercentage) {
            $.post('@Url.Action("ApplyItemDiscount")', {
                productId: productId,
                discountPercentage: discountPercentage,
                __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
            })
            .done(function(response) {
                if (response.success) {
                    refreshCart();
                } else {
                    showToast(response.message, 'error');
                    refreshCart(); // Revert changes
                }
            });
        }

        // Remove from cart
        function removeFromCart(productId) {
            $.post('@Url.Action("RemoveFromCart")', {
                productId: productId,
                __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
            })
            .done(function(response) {
                if (response.success) {
                    showToast(response.message, 'success');
                    refreshCart();
                } else {
                    showToast(response.message, 'error');
                }
            });
        }

        // Clear cart
        function clearCart() {
            if (cart.length === 0) {
                showToast('Cart is already empty', 'info');
                return;
            }

            if (confirm('Are you sure you want to clear the cart?')) {
                $.post('@Url.Action("ClearCart")', {
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                })
                .done(function(response) {
                    if (response.success) {
                        showToast(response.message, 'success');
                        cart = [];
                        updateCartDisplay();
                        hidePaymentSection();
                    }
                });
            }
        }

        // Search customer
        function searchCustomer() {
            const phone = $('#customerPhone').val();
            if (!phone) {
                showToast('Please enter phone number', 'warning');
                return;
            }

            // This would typically make an AJAX call to search for existing customer
            // For now, we'll just enable the name field
            $('#customerName').focus();
        }

        // Show payment section
        function showPaymentSection() {
            if (cart.length === 0) {
                showToast('Please add items to cart first', 'error');
                return;
            }

            // Update payment summary
            updatePaymentSummary();

            // Create hidden form fields
            createHiddenFormFields();

            // Show payment section and hide other sections
            $('#productSelectionArea, #cartArea').hide();
            $('#paymentSection').show();

            // Focus on amount received input
            $('#amountReceived').focus();

            // Scroll to payment section
            $('html, body').animate({
                scrollTop: $('#paymentSection').offset().top - 100
            }, 500);
        }

        // Hide payment section
        function hidePaymentSection() {
            $('#paymentSection').hide();
            $('#productSelectionArea, #cartArea').show();

            // Reset payment form
            $('#amountReceived').val('');
            hidePaymentAdjustmentDisplay();
        }

        // Update payment summary
        function updatePaymentSummary() {
            const summary = getCartSummary();
            $('#paymentSubtotal').text(summary.subtotal.toFixed(2));
            $('#paymentDiscount').text(summary.discountAmount.toFixed(2));
            $('#paymentGST').text(summary.gstAmount.toFixed(2));
            $('#calculatedTotal').text(summary.total.toFixed(2));
            calculatedTotal = summary.total;

            // Suggest exact amount by default
            $('#amountReceived').val(summary.total.toFixed(2));
            calculatePaymentAdjustment();
        }

        // Get cart summary
        function getCartSummary() {
            let subtotal = 0, discountAmount = 0, gstAmount = 0;

            cart.forEach(function(item) {
                subtotal += item.lineSubtotal;
                discountAmount += item.itemDiscountAmount;
                gstAmount += item.lineGST;
            });

            return {
                subtotal: subtotal,
                discountAmount: discountAmount,
                gstAmount: gstAmount,
                total: subtotal - discountAmount + gstAmount,
                itemCount: cart.reduce((sum, item) => sum + item.quantity, 0)
            };
        }

        // Create hidden form fields
        function createHiddenFormFields() {
            let hiddenHtml = '';

            // Customer information
            hiddenHtml += `
                <input type="hidden" name="Sale.CustomerName" value="${$('#customerName').val() || ''}">
                <input type="hidden" name="Sale.CustomerPhone" value="${$('#customerPhone').val() || ''}">
                <input type="hidden" name="Sale.PaymentMethod" value="${$('#paymentMethod').val()}">
                <input type="hidden" name="Sale.PaymentReference" value="${$('#paymentReference').val() || ''}">
                <input type="hidden" name="Sale.Notes" value="${$('#saleNotes').val() || ''}">
            `;

            // Cart items (this will be populated by the backend from session)

            $('#hiddenFormFields').html(hiddenHtml);
        }

        // Calculate payment adjustment in real-time
        function calculatePaymentAdjustment() {
            const amountReceived = parseFloat($('#amountReceived').val()) || 0;

            if (amountReceived <= 0) {
                hidePaymentAdjustmentDisplay();
                return;
            }

            // AJAX call to server for precise calculation
            $.post('@Url.Action("CalculatePaymentAdjustment")', {
                amountReceived: amountReceived,
                __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
            })
            .done(function(response) {
                if (response.success) {
                    displayPaymentAdjustment(response);
                }
            })
            .fail(function() {
                // Fallback to client-side calculation
                const adjustment = amountReceived - calculatedTotal;
                displayPaymentAdjustmentFallback(adjustment);
            });
        }

        // Display payment adjustment information
        function displayPaymentAdjustment(data) {
            if (!data.hasAdjustment) {
                hidePaymentAdjustmentDisplay();
                return;
            }

            // Show adjustment alert with appropriate styling
            const alertClass = data.paymentAdjustment < 0 ? 'alert-warning' : 'alert-info';
            $('#adjustmentAlert').removeClass('alert-warning alert-info alert-success').addClass(alertClass).show();

            $('#adjustmentDisplay').html(`
                <div class="fw-bold ${data.paymentAdjustment < 0 ? 'text-warning' : 'text-info'}">
                    ${data.adjustmentDisplay}
                </div>
                <small class="text-muted">${data.adjustmentType}</small>
            `);

            // Show/hide specific alerts
            if (data.requiresApproval) {
                $('#approvalAlert').show();
                $('#overpaymentAlert').hide();
                $('#completeSaleBtn').removeClass('btn-success').addClass('btn-warning')
                    .html('<i class="fas fa-clock me-2"></i>Complete Sale (Pending Approval)');
            } else if (data.paymentAdjustment > 0) {
                $('#approvalAlert').hide();
                $('#overpaymentAlert').show();
                $('#completeSaleBtn').removeClass('btn-warning').addClass('btn-success')
                    .html('<i class="fas fa-check me-2"></i>Complete Sale');
            } else {
                $('#approvalAlert, #overpaymentAlert').hide();
                $('#completeSaleBtn').removeClass('btn-warning').addClass('btn-success')
                    .html('<i class="fas fa-check me-2"></i>Complete Sale');
            }

            // Show adjustment reason row
            $('#adjustmentReasonRow').show();
        }

        // Fallback adjustment display
        function displayPaymentAdjustmentFallback(adjustment) {
            const hasAdjustment = Math.abs(adjustment) > 0.01;

            if (!hasAdjustment) {
                hidePaymentAdjustmentDisplay();
                return;
            }

            const alertClass = adjustment < 0 ? 'alert-warning' : 'alert-info';
            $('#adjustmentAlert').removeClass('alert-warning alert-info').addClass(alertClass).show();

            $('#adjustmentDisplay').html(`
                <div class="fw-bold ${adjustment < 0 ? 'text-warning' : 'text-info'}">
                    ${adjustment < 0 ? `Short by ₹${Math.abs(adjustment).toFixed(2)}` : `Over by ₹${adjustment.toFixed(2)}`}
                </div>
            `);

            $('#adjustmentReasonRow').show();
        }

        // Hide payment adjustment display
        function hidePaymentAdjustmentDisplay() {
            $('#adjustmentAlert, #approvalAlert, #overpaymentAlert, #adjustmentReasonRow').hide();
            $('#completeSaleBtn').removeClass('btn-warning').addClass('btn-success')
                .html('<i class="fas fa-check me-2"></i>Complete Sale');
        }

        // Suggest rounded amounts
        function suggestRoundedAmount(type) {
            let suggestedAmount = calculatedTotal;

            switch(type) {
                case 'round5':
                    suggestedAmount = Math.ceil(calculatedTotal / 5) * 5;
                    break;
                case 'round10':
                    suggestedAmount = Math.ceil(calculatedTotal / 10) * 10;
                    break;
                case 'exact':
                    suggestedAmount = calculatedTotal;
                    break;
            }

            $('#amountReceived').val(suggestedAmount.toFixed(2));
            calculatePaymentAdjustment();
        }

        // Print estimate
        function printEstimate() {
            if (cart.length === 0) {
                showToast('No items in cart to print', 'error');
                return;
            }

            // This would open a print dialog with estimate/quotation
            showToast('Estimate printing feature coming soon', 'info');
        }

        // Form validation before submission
        $('#paymentForm').on('submit', function(e) {
            const amountReceived = parseFloat($('#amountReceived').val()) || 0;

            if (amountReceived <= 0) {
                e.preventDefault();
                showToast('Please enter the amount received from customer', 'error');
                return;
            }

            const adjustment = amountReceived - calculatedTotal;

            // Confirm significant underpayment
            if (adjustment < -50 || (calculatedTotal > 0 && Math.abs(adjustment) / calculatedTotal * 100 > 10)) {
                if (!confirm(`Payment amount seems significantly different from calculated total. Are you sure you want to continue?`)) {
                    e.preventDefault();
                    return;
                }
            }

            // Show loading state
            $('#completeSaleBtn').prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-2"></i>Processing...');
        });

        // Utility functions
        function showToast(message, type = 'info') {
            const alertClass = `alert-${type === 'error' ? 'danger' : type}`;
            const icon = type === 'success' ? 'check' : type === 'error' ? 'exclamation-triangle' : 'info-circle';

            const toast = $(`
                <div class="alert ${alertClass} alert-dismissible fade show position-fixed"
                     style="top: 20px; right: 20px; z-index: 9999; min-width: 300px;" role="alert">
                    <i class="fas fa-${icon} me-2"></i>
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `);

            $('body').append(toast);

            // Auto-remove after 5 seconds
            setTimeout(function() {
                toast.fadeOut(function() { $(this).remove(); });
            }, 5000);
        }

                class BarcodeScanner {
            constructor() {
                this.isScanning = false;
                this.currentProductId = null;
                this.initializeEventHandlers();
                this.setupKeyboardShortcuts();
            }

            initializeEventHandlers() {
                // Start/Stop scanner buttons
                document.getElementById('startScanner').addEventListener('click', () => this.startScanner());
                document.getElementById('stopScanner').addEventListener('click', () => this.stopScanner());

                // Manual barcode entry
                document.getElementById('manualBarcodeInput').addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        this.searchByCode();
                    }
                });

                document.getElementById('searchByCodeBtn').addEventListener('click', () => this.searchByCode());

                // Add scanned product to cart
                document.getElementById('addScannedToCart').addEventListener('click', () => this.addScannedToCart());

                // Auto-focus on manual input
                document.getElementById('manualBarcodeInput').focus();
            }

            setupKeyboardShortcuts() {
                // F2 key to start scanner
                document.addEventListener('keydown', (e) => {
                    if (e.key === 'F2' && !e.ctrlKey && !e.altKey) {
                        e.preventDefault();
                        if (!this.isScanning) {
                            this.startScanner();
                        } else {
                            this.stopScanner();
                        }
                    }
                    // F3 key to focus on manual input
                    else if (e.key === 'F3' && !e.ctrlKey && !e.altKey) {
                        e.preventDefault();
                        document.getElementById('manualBarcodeInput').focus();
                        document.getElementById('manualBarcodeInput').select();
                    }
                });
            }

            async startScanner() {
                try {
                    this.showMessage('Starting camera...', 'info');

                    // Request camera permission
                    const stream = await navigator.mediaDevices.getUserMedia({
                        video: {
                            facingMode: 'environment', // Use back camera if available
                            width: { ideal: 640 },
                            height: { ideal: 480 }
                        }
                    });

                    // Initialize Quagga barcode scanner
                    Quagga.init({
                        inputStream: {
                            name: "Live",
                            type: "LiveStream",
                            target: document.querySelector('#scannerVideo'),
                            constraints: {
                                width: 640,
                                height: 480,
                                facingMode: "environment"
                            }
                        },
                        decoder: {
                            readers: [
                                "code_128_reader",
                                "ean_reader",
                                "ean_8_reader",
                                "code_39_reader",
                                "code_39_vin_reader",
                                "codabar_reader",
                                "upc_reader",
                                "upc_e_reader"
                            ],
                            debug: {
                                showCanvas: false,
                                showPatches: false,
                                showFoundPatches: false,
                                showSkeleton: false,
                                showLabels: false,
                                showPatchLabels: false,
                                showRemainingPatchLabels: false,
                                boxFromPatches: {
                                    showTransformed: false,
                                    showTransformedBox: false,
                                    showBB: false
                                }
                            }
                        },
                        locate: true,
                        locator: {
                            patchSize: "medium",
                            halfSample: true
                        },
                        numOfWorkers: 2,
                        frequency: 10,
                    }, (err) => {
                        if (err) {
                            console.error('Scanner initialization error:', err);
                            this.showMessage('Failed to start camera: ' + err.message, 'danger');
                            return;
                        }

                        console.log("Scanner initialized successfully");
                        Quagga.start();
                        this.isScanning = true;
                        this.updateScannerUI(true);
                        this.showMessage('Camera ready! Point at a barcode to scan', 'success');

                        // Set up barcode detection
                        Quagga.onDetected((result) => {
                            this.handleBarcodeDetected(result.codeResult.code);
                        });
                    });

                } catch (error) {
                    console.error('Camera access error:', error);
                    this.showMessage('Camera access denied. Please enable camera permissions or use manual entry.', 'warning');
                }
            }

            stopScanner() {
                if (this.isScanning) {
                    Quagga.stop();
                    this.isScanning = false;
                    this.updateScannerUI(false);
                    this.showMessage('Scanner stopped', 'info');
                }
            }

            updateScannerUI(isActive) {
                const startBtn = document.getElementById('startScanner');
                const stopBtn = document.getElementById('stopScanner');
                const container = document.getElementById('scannerContainer');

                if (isActive) {
                    startBtn.classList.add('d-none');
                    stopBtn.classList.remove('d-none');
                    container.classList.remove('d-none');
                } else {
                    startBtn.classList.remove('d-none');
                    stopBtn.classList.add('d-none');
                    container.classList.add('d-none');
                }
            }

            async handleBarcodeDetected(code) {
                console.log('Barcode detected:', code);

                // Stop scanning temporarily to prevent multiple reads
                this.stopScanner();

                // Vibrate if supported (mobile devices)
                if (navigator.vibrate) {
                    navigator.vibrate(200);
                }

                // Search for product
                await this.searchProduct(code);
            }

            async searchByCode() {
                const code = document.getElementById('manualBarcodeInput').value.trim();
                if (!code) {
                    this.showMessage('Please enter a SKU or barcode', 'warning');
                    return;
                }
                await this.searchProduct(code);
            }

            async searchProduct(code) {
                try {
                    this.showMessage('Searching for product...', 'info');

                    const response = await fetch(`/Sales/ScanBarcode?code=${encodeURIComponent(code)}`);
                    const result = await response.json();

                    if (result.success) {
                        this.displayProductPreview(result.product);
                        this.currentProductId = result.product.id;
                        this.showMessage(result.message, 'success');

                        // Auto-focus on quantity field
                        setTimeout(() => {
                            document.getElementById('scannedQuantity').focus();
                            document.getElementById('scannedQuantity').select();
                        }, 100);

                    } else {
                        this.hideProductPreview();
                        this.showMessage(result.message, 'danger');

                        if (result.suggestManualSearch) {
                            this.showMessage('Try using the regular product search above', 'info');
                        }
                    }

                } catch (error) {
                    console.error('Search error:', error);
                    this.showMessage('Error searching for product: ' + error.message, 'danger');
                }
            }

            displayProductPreview(product) {
                const preview = document.getElementById('scannedProductPreview');
                const details = document.getElementById('productDetails');

                details.innerHTML = `
                    <div class="row">
                        <div class="col-12">
                            <h6 class="text-primary">${product.name}</h6>
                            <p class="mb-1"><strong>Category:</strong> ${product.category}</p>
                            <p class="mb-1"><strong>Price:</strong> ₹${product.price.toFixed(2)}
                                <small class="text-muted">(₹${product.priceWithGST.toFixed(2)} incl. GST)</small></p>
                            <p class="mb-1"><strong>Stock:</strong>
                                <span class="badge ${product.isLowStock ? 'bg-warning' : 'bg-success'}">
                                    ${product.stock} ${product.unitOfMeasure}
                                </span>
                            </p>
                            <p class="mb-0"><strong>Code:</strong> <code>${product.scannedCode}</code></p>
                        </div>
                    </div>
                `;

                preview.classList.remove('d-none');

                // Set maximum quantity based on stock
                const quantityInput = document.getElementById('scannedQuantity');
                quantityInput.max = product.stock;

                // Clear previous values
                document.getElementById('scannedDiscount').value = 0;
            }

            hideProductPreview() {
                document.getElementById('scannedProductPreview').classList.add('d-none');
                this.currentProductId = null;
            }

            async addScannedToCart() {
                if (!this.currentProductId) {
                    this.showMessage('No product selected', 'warning');
                    return;
                }

                const quantity = parseFloat(document.getElementById('scannedQuantity').value);
                const discount = parseFloat(document.getElementById('scannedDiscount').value || 0);

                if (quantity <= 0) {
                    this.showMessage('Please enter a valid quantity', 'warning');
                    return;
                }

                try {
                    this.showMessage('Adding to cart...', 'info');

                    const formData = new FormData();
                    formData.append('productId', this.currentProductId);
                    formData.append('quantity', quantity);
                    formData.append('discountPercentage', discount);

                    const response = await fetch('/Sales/AddScannedProductToCart', {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        }
                    });

                    const result = await response.json();

                    if (result.success) {
                        this.showMessage(result.message, 'success');
                        this.hideProductPreview();

                        // Clear inputs
                        document.getElementById('manualBarcodeInput').value = '';
                        document.getElementById('scannedQuantity').value = 1;
                        document.getElementById('scannedDiscount').value = 0;

                        // Update cart display
                        this.updateCartDisplay(result);

                        // Focus back on manual input for next scan
                        document.getElementById('manualBarcodeInput').focus();

                    } else {
                        this.showMessage(result.message, 'danger');
                    }

                } catch (error) {
                    console.error('Add to cart error:', error);
                    this.showMessage('Error adding to cart: ' + error.message, 'danger');
                }
            }

            updateCartDisplay(result) {
                // Update cart totals if elements exist
                const cartCountElement = document.querySelector('.cart-count');
                if (cartCountElement) {
                    cartCountElement.textContent = result.cartCount;
                }

                const cartTotalElement = document.querySelector('.cart-total');
                if (cartTotalElement) {
                    cartTotalElement.textContent = `₹${result.cartTotal.toFixed(2)}`;
                }

                // Refresh the page's cart section if your existing code has a refresh function
                if (typeof refreshCart === 'function') {
                    refreshCart();
                }
            }

            showMessage(message, type = 'info') {
                const container = document.getElementById('scannerMessages');
                const alertClass = `alert-${type}`;

                container.innerHTML = `
                    <div class="alert ${alertClass} alert-dismissible fade show" role="alert">
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                `;

                // Auto-dismiss after 5 seconds for non-error messages
                if (type !== 'danger') {
                    setTimeout(() => {
                        const alert = container.querySelector('.alert');
                        if (alert) {
                            alert.remove();
                        }
                    }, 5000);
                }
            }
        }

        // Initialize scanner when page loads
        document.addEventListener('DOMContentLoaded', function() {
            window.barcodeScanner = new BarcodeScanner();
            console.log('Barcode scanner initialized');

            // Show keyboard shortcuts info
            console.log('Keyboard shortcuts:');
            console.log('F2 - Start/Stop camera scanner');
            console.log('F3 - Focus on manual barcode input');
            console.log('Enter - Search when typing in manual input');
        });
    </script>
}

<style>
    .scanner-line {
        position: absolute;
        top: 50%;
        left: 10%;
        right: 10%;
        height: 2px;
        background: linear-gradient(90deg, transparent, #ff0000, transparent);
        animation: scannerMove 2s ease-in-out infinite;
        z-index: 10;
    }

    @@keyframes scannerMove {
        0%, 100% {
            transform: translateY(-20px);
            opacity: 0.7;
        }

        50% {
            transform: translateY(20px);
            opacity: 1;
        }
    }

    #scannerVideo {
        border-radius: 0.375rem;
    }

    .object-fit-cover {
        object-fit: cover;
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        #scannerContainer {
            height: 250px !important;
        }
    }
</style>